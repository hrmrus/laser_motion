#include <Arduino.h>


#define DEBUG    // когда закончишь отлаживать зацементируй

#define pinPhoto   A0 // Фоторезистор на порту...

#define pinPhoto2  A1 // Фоторезистор на порту...

#define rele        13 // Реле на порту...

#define laser       12 //Лазер на порту...

int stateMach(boolean IR1_state, boolean IR2_state, int * cnt);

void setup() {



  pinMode(laser, OUTPUT);

  pinMode( pinPhoto, INPUT );

  pinMode( pinPhoto2, INPUT );

  Serial.begin(9600);

}

void loop() {
                               //  Статические переменные

  static int raw1[2]  = {0,0};

  static int raw2[2] = {0,0};

  static boolean IR1_state = 0;

  static boolean IR2_state = 0;

  static int count = 0;


          // Количество людей

/************************ Замеряем состояние фотоприемников ********************/

  //  ВКЛЮЧЕМ лазер
  digitalWrite(laser, HIGH);
  delay(10); //  делаем минимальную задержку на срабатывание физики
  // замеряем код АЦП
  raw1[0] = analogRead( pinPhoto2);
  raw2[0] = analogRead( pinPhoto );

  // ВЫКЛЮЧАЕМ лазер
  digitalWrite(laser, LOW); // реализуем новое состояние
  delay(10);// делаем минимальную задержку на срабатывание физики

  // замеряем код АЦП
  raw1[1] = analogRead( pinPhoto2 );
  raw2[1] = analogRead( pinPhoto);


/****************** Вычисляем наличие  препятствия на пути *********************/

  // переменной IR1_state присваиваем 0 или 1 в зависимости от показаний фоторезистора raw
  if( (raw1[0] -  raw1[1]) > 150) IR1_state = 1;
  else                            IR1_state = 0;

  // переменной IR2_state присваиваем 0 или 1 в зависимости от показаний фоторезистора raw */
  if( (raw2[0] -  raw2[1]) > 150) IR2_state = 1;
  else                            IR2_state = 0;


/************************ Вычисление пересечений человека ***************************/


  static boolean IR1_state_old = 0;
  static boolean IR2_state_old = 0;
  int stat;
    // вызов функции  stateMach (IR1_state, IR2_state, &count); count - количество людей прошло (int)
  stat = stateMach (IR1_state, IR2_state, &count); // передача адреса переменной count.

  if (IR1_state_old != IR1_state || IR2_state_old != IR2_state )


#ifdef DEBUG // Вывод отладочной информации

  {
    Serial.print( "State sensor: I-");

    Serial.print( IR1_state );

    Serial.print( " II-");

    Serial.print( IR2_state );

    Serial.print( " Count Men: ");

    Serial.print( count );

    Serial.print( " Stat SM: ");

    Serial.println( stat );
}
#endif

  IR1_state_old = IR1_state;
  IR2_state_old = IR2_state;
  if (count < 1)count = 0;

  if (count >= 1)

digitalWrite(rele, HIGH);
else
digitalWrite(rele, LOW);
}

/*******************************************************/



#define  _ST_INIT        00      // Инициализация

#define  _ST_L_01        01      // шаг 3 Человек закрыл фр 2               в

#define  _ST_L_00        02      //    шаг 2 Человек закрыл фр-ы 1 и 2         х

#define  _ST_L_10        03      // шаг 1 Человек закрыл фр 1               д

#define  _ST_11          04      // Состояние ожидания Человека нет в проходе фр1=1 фр2=1

#define  _ST_R_10        05      //        в          Шаг 1 Человек закрыл фр 1

#define  _ST_R_00        06      //    ы        Шаг 2 Человек закрыл фр-ы 1 и 2

#define  _ST_R_01        07      //         х         Шаг 3 Человек закрыл фр 2





int stateMach(boolean IR1_state, boolean IR2_state, int *cnt) // *cnt указатель для передачи по ссылке данных из &count

{
  static int state = 0;

  switch (state)
 {

case _ST_INIT:
    {
     if  (IR1_state && IR2_state)  state = _ST_11;
    break;
    }

case _ST_L_01:

    {
     if (IR1_state && IR2_state) {state = _ST_11; (*cnt) ++;}
    break;
    }

case _ST_L_00:

    {
     if (!IR1_state && IR2_state) state = _ST_L_01;
     if (IR1_state && IR2_state) state = _ST_11;
    break;
    }

case _ST_L_10:

    {
     if (!IR1_state && !IR2_state) state = _ST_L_00;
     if (IR1_state && IR2_state) state = _ST_11;
    break;

    }

case _ST_11:

    {
      if (IR1_state && !IR2_state) state = _ST_L_10;
      if (!IR1_state && IR2_state) state = _ST_R_01;
      break;
    }

case _ST_R_01:

    {
     if (IR1_state && IR2_state) state = _ST_11;
     if (!IR1_state && !IR2_state) state = _ST_R_00;
     break;
     }

case _ST_R_00:

    {
     if (IR1_state && IR2_state) state = _ST_11;
     if (IR1_state && !IR2_state) state = _ST_R_10;
     break;
    }

case _ST_R_10:

    {
    if (IR1_state && IR2_state) {state = _ST_11; (*cnt)--; }
    break;
 }

  }

  return state;



}

/*******************************************************/

